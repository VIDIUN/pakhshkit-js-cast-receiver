{"version":3,"sources":["./cast/receiver/webpack/universalModuleDefinition","./cast/receiver/playkit-cast-receiver.js","./cast/receiver/webpack/bootstrap bbcc7b27527f996e63b0","./cast/receiver/external {\"commonjs\":\"kaltura-player-js\",\"commonjs2\":\"kaltura-player-js\",\"amd\":\"kaltura-player-js\",\"root\":[\"KalturaPlayer\"]}","./cast/receiver/./receiver-manager.js","./cast/receiver/./player-loader.js","./cast/receiver/./index.js","./cast/receiver/./receiver-manager-api.js","./cast/receiver/./cast-engine.js","./cast/receiver/./default-player-config.js","./cast/receiver/./error/error.js","./cast/receiver/./error/error-type.js","./cast/receiver/./receiver-tracks-manager.js","./cast/receiver/./receiver-ads-manager.js"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE_0__","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_defineProperty","obj","key","value","writable","_classCallCheck","instance","Constructor","TypeError","ReceiverManager","CUSTOM_CHANNEL","undefined","_createClass","defineProperties","target","props","length","descriptor","protoProps","staticProps","_kalturaPlayerJs","_playerLoader","_receiverTracksManager","_receiverAdsManager","EventManager","core","FakeEvent","DrmScheme","Utils","getLogger","CustomMessageType","cast","CustomActionType","CustomActionMessage","config","_messageInterceptorsH","_playerManagerEventHa","_logger","_shouldSeekToLiveEdge","_shouldAutoPlay","_firstPlay","_messageInterceptorsHandlers","framework","messages","MessageType","LOAD","onLoad","MEDIA_STATUS","onMediaStatus","STOP","onStop","_playerManagerEventHandlers","events","EventType","REQUEST_PLAY","_onPlayEvent","REQUEST_PAUSE","_onPauseEvent","PLAYER_LOAD_COMPLETE","_onPlayerLoadCompleteEvent","_castContextEventHandlers","system","SYSTEM_VOLUME_CHANGED","_onSystemVolumeChangedEvent","_context","CastReceiverContext","getInstance","_playerManager","getPlayerManager","_eventManager","_player","PlayerLoader","loadPlayer","_tracksManager","ReceiverTracksManager","_adsManager","ReceiverAdsManager","_attachListeners","options","defaultOptions","CastReceiverOptions","customNamespaces","JSON","mergeDeep","debug","start","loadRequestData","_this","_reset","Promise","resovle","reject","mediaInfo","media","customData","_maybeCreateVmapAdsRequest","_maybeReplaceAdTagTimestamp","listen","Event","ERROR","event","SOURCE_SELECTED","_onSourceSelected","loadMedia","requestData","_destroy","mediaStatus","getMediaInfo","isLive","supportedMediaCommands","Command","SEEK","currentTime","duration","playerState","getPlayerState","_this2","addCustomMessageListener","customMessage","_onCustomMessage","keys","forEach","addEventListener","bind","msg","setMessageInterceptor","removeAll","reset","destroy","resolve","source","payload","selectedSource","_handleAutoPlay","_handleLiveDvr","_setMediaInfo","_maybeSetDrmLicenseUrl","contentId","id","contentUrl","url","contentType","mimetype","streamType","StreamType","LIVE","BUFFERED","metadata","GenericMediaMetadata","title","sources","subtitle","description","images","poster","hlsSegmentFormat","HlsSegmentFormat","TS","autoplay","isDvr","_this3","drmData","data","find","scheme","WIDEVINE","setMediaPlaybackInfoHandler","loadRequest","playbackConfig","protectionSystem","ContentProtection","licenseUrl","seekToLiveEdge","play","pause","_this4","load","ready","then","setInitialTracks","systemVolumeChangedEvent","volume","level","muted","customMessageEvent","type","ACTION","_handleCustomAction","customAction","action","SKIP_AD","skipAd","vmapAdsRequest","replaceTimestamp","adtag","regex","test","match","replace","Date","now","breakClips","breakClip","vastAdsRequest","adTagUrl","CAST_MEDIA_PLAYER_TAG","_castEngine","_defaultPlayerConfig","_error","_errorType","unRegisterEngine","registerEngine","EngineType","castMediaPlayerEl","Dom","getElementsByTagName","castMediaElement","getMediaElement","style","position","playerContainerEl","createElement","appendChild","document","body","HTML5","CAST","CastEngine","playerConfig","targetId","DefaultPlayerConfig","player","setup","prependTo","parentNode","ReceiverError","ErrorType","CAST_ELEMENT_NOT_FOUND","NAME","VERSION","Receiver","_receiverManagerApi","ReceiverManagerAPI","_receiverManager","receiverManager","arguments","listener","getPlayer","removeEventListener","_toConsumableArray","arr","Array","isArray","arr2","from","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","Track","MediaType","FakeEventTarget","AudioTrack","TextTrack","AbrMode","MimeType","_FakeEventTarget","getPrototypeOf","_isLoaded","_tracks","_volume","_muted","_paused","_seeking","_ended","_mediaElementEvents","ABORT","CAN_PLAY","CAN_PLAY_THROUGH","DURATION_CHANGE","EMPTIED","ENDED","LOADED_DATA","LOADED_METADATA","LOAD_START","PAUSE","PLAY","PLAYING","PROGRESS","RATE_CHANGE","SEEKED","SEEKING","STALLED","TIME_UPDATE","SUSPEND","WAITING","_createVideoElement","_init","mimeType","toLowerCase","_supportedMimeTypes","includes","DASH","videoElement","getVideoElement","dispatchEvent","broadcastStatus","mediaElementEvent","_el","startTime","_parseTracks","ABR_MODE_CHANGED","mode","AUTO","tracks","textTrack","TEXT_TRACK_CHANGED","selectedTextTrack","audioTrack","AUDIO_TRACK_CHANGED","selectedAudioTrack","videoTrack","VIDEO_TRACK_CHANGED","selectedVideoTrack","copyDeep","_source","_config","range","getLiveSeekableRange","seek","end","removeAttribute","removeChild","attach","audioTracksManager","getAudioTracksManager","castAudioTracks","getTracks","audioTracks","_parseAudioTracks","textTracksManager","getTextTracksManager","castTextTracks","textTracks","_parseTextTracks","concat","track","settings","trackId","index","label","language","kind","subType","active","push","set","getCurrentTimeSec","getStartTimeOfDvrWindow","getDurationSec","VOLUME_CHANGE","playsinline","playbackRate","getPlaybackRate","crossOrigin","mutedAutoPlay","HLS","PROGRESSIVE","SMOOTH_STREAMING","playback","preload","disableUserCache","streamPriority","engine","format","ui","disable","code","TextStyleConverter","TrackType","getMediaInformation","_setInitialAudioTrack","audioLanguage","_setInitialTextTrack","textLanguage","REQUEST_EDIT_TRACKS_INFO","requestEvent","activeTrackIds","_handleAudioTrackSelection","_handleTextTrackSelection","textTrackStyle","_handleTextStyleSelection","TEXT","activeTextTrack","t","nextActiveTextTrack","selectTrack","offTrack","AUDIO","activeAudioTrack","nextActiveAudioTrack","textStyle","toPlayerTextStyle","setActiveByLanguage","audioTrackId","setActiveById","Ad","AdBreak","AdBreakType","CustomEventMessage","_timePercentEvent","AD_REACHED_25_PERCENT","AD_REACHED_50_PERCENT","AD_REACHED_75_PERCENT","_bindMethods","RequestData","sendLocalMediaRequest","_onPlayerLoadComplete","_onBreakStarted","_onBreakEnded","_onBreakClipLoading","_onBreakClipStarted","_onBreakClipEnded","_onAdPaused","_onAdResumed","_onAdProgress","_onMuteChange","_onVolumeChange","_adLifecycleEventHand","_adTrackingEventHandl","_playerEventHandlers","_adLifecycleEventHandlers","BREAK_STARTED","BREAK_ENDED","BREAK_CLIP_LOADING","BREAK_CLIP_STARTED","BREAK_CLIP_ENDED","_adTrackingEventHandlers","MUTE_CHANGE","positions","breakManager","getBreakManager","breaks","getBreaks","b","_sendEventAndCustomMessage","AD_MANIFEST_LOADED","adBreaksPosition","breaksEvent","_toggleAdBreakListeners","adBreakOptions","_getAdBreakOptions","adBreak","AD_BREAK_START","_adBreak","AD_BREAK_END","findIndex","breakId","ALL_ADS_COMPLETED","adOptions","_getAdOptions","ad","breakClipId","AD_LOADED","_ad","AD_STARTED","_adIsPlaying","AD_COMPLETED","_adCanSkipTriggered","AD_PAUSED","AD_RESUMED","adDuration","getBreakClipDurationSec","adCurrentTime","getBreakClipCurrentTimeSec","percent","AD_FIRST_QUARTILE","AD_MIDPOINT","AD_THIRD_QUARTILE","skippable","skipOffset","AD_CAN_SKIP","AD_PROGRESS","adProgress","AD_MUTED","AD_VOLUME_CHANGED","toggle","_adProgressIntervalId","setInterval","clearInterval","currentBreak","getBreakById","_getAdBreakTypeByPosition","numAds","breakClipIds","PRE","POST","MID","currentBreakClip","getBreakClipById","indexOf","clickThroughUrl","posterUrl","whenSkippable","linear","toUpperCase","sendCustomMessage"],"mappings":"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","file":"playkit-cast-receiver.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"kaltura-player-js\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"receiver\", [\"kaltura-player-js\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"receiver\"] = factory(require(\"kaltura-player-js\"));\n\telse\n\t\troot[\"KalturaPlayer\"] = root[\"KalturaPlayer\"] || {}, root[\"KalturaPlayer\"][\"cast\"] = root[\"KalturaPlayer\"][\"cast\"] || {}, root[\"KalturaPlayer\"][\"cast\"][\"receiver\"] = factory(root[\"KalturaPlayer\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_0__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"kaltura-player-js\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"receiver\", [\"kaltura-player-js\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"receiver\"] = factory(require(\"kaltura-player-js\"));\n\telse\n\t\troot[\"KalturaPlayer\"] = root[\"KalturaPlayer\"] || {}, root[\"KalturaPlayer\"][\"cast\"] = root[\"KalturaPlayer\"][\"cast\"] || {}, root[\"KalturaPlayer\"][\"cast\"][\"receiver\"] = factory(root[\"KalturaPlayer\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_0__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 3);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReceiverManager = exports.CUSTOM_CHANNEL = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _kalturaPlayerJs = __webpack_require__(0);\n\nvar _playerLoader = __webpack_require__(2);\n\nvar _receiverTracksManager = __webpack_require__(9);\n\nvar _receiverAdsManager = __webpack_require__(10);\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar FakeEvent = _kalturaPlayerJs.core.FakeEvent,\n    EventManager = _kalturaPlayerJs.core.EventManager,\n    DrmScheme = _kalturaPlayerJs.core.DrmScheme,\n    Utils = _kalturaPlayerJs.core.Utils,\n    getLogger = _kalturaPlayerJs.core.getLogger;\nvar CustomMessageType = _kalturaPlayerJs.cast.CustomMessageType,\n    CustomActionType = _kalturaPlayerJs.cast.CustomActionType,\n    CustomActionMessage = _kalturaPlayerJs.cast.CustomActionMessage;\nvar CUSTOM_CHANNEL = exports.CUSTOM_CHANNEL = 'urn:x-cast:com.kaltura.cast.playkit';\nvar LIVE_EDGE = -1;\n\nvar ReceiverManager = function () {\n  function ReceiverManager(config) {\n    var _messageInterceptorsH, _playerManagerEventHa;\n\n    _classCallCheck(this, ReceiverManager);\n\n    this._logger = getLogger('ReceiverManager');\n    this._shouldSeekToLiveEdge = false;\n    this._shouldAutoPlay = true;\n    this._firstPlay = true;\n    this._messageInterceptorsHandlers = (_messageInterceptorsH = {}, _defineProperty(_messageInterceptorsH, cast.framework.messages.MessageType.LOAD, this.onLoad), _defineProperty(_messageInterceptorsH, cast.framework.messages.MessageType.MEDIA_STATUS, this.onMediaStatus), _defineProperty(_messageInterceptorsH, cast.framework.messages.MessageType.STOP, this.onStop), _messageInterceptorsH);\n    this._playerManagerEventHandlers = (_playerManagerEventHa = {}, _defineProperty(_playerManagerEventHa, cast.framework.events.EventType.REQUEST_PLAY, this._onPlayEvent), _defineProperty(_playerManagerEventHa, cast.framework.events.EventType.REQUEST_PAUSE, this._onPauseEvent), _defineProperty(_playerManagerEventHa, cast.framework.events.EventType.PLAYER_LOAD_COMPLETE, this._onPlayerLoadCompleteEvent), _playerManagerEventHa);\n    this._castContextEventHandlers = _defineProperty({}, cast.framework.system.EventType.SYSTEM_VOLUME_CHANGED, this._onSystemVolumeChangedEvent);\n\n    this._context = cast.framework.CastReceiverContext.getInstance();\n    this._playerManager = this._context.getPlayerManager();\n    this._eventManager = new EventManager();\n    this._player = _playerLoader.PlayerLoader.loadPlayer(config);\n    this._tracksManager = new _receiverTracksManager.ReceiverTracksManager(this._player);\n    this._adsManager = new _receiverAdsManager.ReceiverAdsManager(this._player);\n    this._attachListeners();\n  }\n\n  _createClass(ReceiverManager, [{\n    key: 'getPlayer',\n    value: function getPlayer() {\n      return this._player;\n    }\n  }, {\n    key: 'start',\n    value: function start(options) {\n      var defaultOptions = new cast.framework.CastReceiverOptions();\n      defaultOptions.customNamespaces = _defineProperty({}, CUSTOM_CHANNEL, cast.framework.system.MessageType.JSON);\n      Utils.Object.mergeDeep(defaultOptions, options);\n      this._logger.debug('Start receiver', defaultOptions);\n      this._context.start(defaultOptions);\n    }\n  }, {\n    key: 'onLoad',\n    value: function onLoad(loadRequestData) {\n      var _this = this;\n\n      this._logger.debug('onLoad', loadRequestData);\n      this._reset();\n      return new Promise(function (resovle, reject) {\n        var mediaInfo = loadRequestData.media.customData.mediaInfo;\n        _this._maybeCreateVmapAdsRequest(loadRequestData.media);\n        _this._maybeReplaceAdTagTimestamp(loadRequestData.media);\n        _this._eventManager.listen(_this._player, _this._player.Event.ERROR, function (event) {\n          return reject(event);\n        });\n        _this._eventManager.listen(_this._player, _this._player.Event.SOURCE_SELECTED, function (event) {\n          return _this._onSourceSelected(event, loadRequestData, resovle);\n        });\n        _this._player.loadMedia(mediaInfo);\n      });\n    }\n  }, {\n    key: 'onStop',\n    value: function onStop(requestData) {\n      this._logger.debug('onStop', requestData);\n      this._destroy();\n      return requestData;\n    }\n  }, {\n    key: 'onMediaStatus',\n    value: function onMediaStatus(mediaStatus) {\n      this._logger.debug('mediaStatus', mediaStatus);\n      mediaStatus.customData = mediaStatus.customData || {};\n      if (this._player) {\n        mediaStatus.customData.mediaInfo = this._player.getMediaInfo();\n        if (this._player.isLive()) {\n          // Workaround to avoid Live & Dvr seek issue\n          mediaStatus.supportedMediaCommands -= cast.framework.messages.Command.SEEK;\n          mediaStatus.currentTime = this._player.currentTime;\n          if (mediaStatus.media) {\n            mediaStatus.media.duration = this._player.duration;\n          }\n        }\n      }\n      if (mediaStatus.playerState !== this._playerManager.getPlayerState()) {\n        mediaStatus.playerState = this._playerManager.getPlayerState();\n      }\n      return mediaStatus;\n    }\n  }, {\n    key: '_attachListeners',\n    value: function _attachListeners() {\n      var _this2 = this;\n\n      this._context.addCustomMessageListener(CUSTOM_CHANNEL, function (customMessage) {\n        return _this2._onCustomMessage(customMessage);\n      });\n      Object.keys(this._playerManagerEventHandlers).forEach(function (event) {\n        return _this2._playerManager.addEventListener(event, _this2._playerManagerEventHandlers[event].bind(_this2));\n      });\n      Object.keys(this._messageInterceptorsHandlers).forEach(function (msg) {\n        return _this2._playerManager.setMessageInterceptor(msg, _this2._messageInterceptorsHandlers[msg].bind(_this2));\n      });\n      Object.keys(this._castContextEventHandlers).forEach(function (event) {\n        return _this2._context.addEventListener(event, _this2._castContextEventHandlers[event].bind(_this2));\n      });\n    }\n  }, {\n    key: '_reset',\n    value: function _reset() {\n      this._shouldAutoPlay = true;\n      this._firstPlay = true;\n      this._shouldSeekToLiveEdge = false;\n      this._eventManager.removeAll();\n      this._player.reset();\n    }\n  }, {\n    key: '_destroy',\n    value: function _destroy() {\n      this._shouldAutoPlay = true;\n      this._firstPlay = true;\n      this._eventManager.destroy();\n      this._player.destroy();\n    }\n  }, {\n    key: '_onSourceSelected',\n    value: function _onSourceSelected(event, loadRequestData, resolve) {\n      var source = event.payload.selectedSource[0];\n      this._handleAutoPlay(loadRequestData);\n      this._handleLiveDvr(loadRequestData);\n      this._setMediaInfo(loadRequestData, source);\n      this._maybeSetDrmLicenseUrl(source);\n      resolve(loadRequestData);\n    }\n  }, {\n    key: '_setMediaInfo',\n    value: function _setMediaInfo(loadRequestData, source) {\n      loadRequestData.media.contentId = loadRequestData.media.contentId || source.id;\n      loadRequestData.media.contentUrl = loadRequestData.media.contentUrl || source.url;\n      loadRequestData.media.contentType = loadRequestData.media.contentType || source.mimetype;\n      loadRequestData.media.streamType = this._player.isLive() ? cast.framework.messages.StreamType.LIVE : cast.framework.messages.StreamType.BUFFERED;\n      loadRequestData.media.metadata = loadRequestData.media.metadata || new cast.framework.messages.GenericMediaMetadata();\n      loadRequestData.media.metadata.title = loadRequestData.media.metadata.title || this._player.config.sources.metadata.name;\n      loadRequestData.media.metadata.subtitle = loadRequestData.media.metadata.subtitle || this._player.config.sources.metadata.description;\n      loadRequestData.media.metadata.images = loadRequestData.media.metadata.images || [{ url: this._player.config.sources.poster }];\n      loadRequestData.media.hlsSegmentFormat = loadRequestData.media.hlsSegmentFormat || cast.framework.messages.HlsSegmentFormat.TS;\n      this._logger.debug('Media info has been set', loadRequestData);\n    }\n  }, {\n    key: '_handleAutoPlay',\n    value: function _handleAutoPlay(loadRequestData) {\n      if (!loadRequestData.autoplay) {\n        this._shouldAutoPlay = false;\n        loadRequestData.autoplay = true;\n      }\n    }\n  }, {\n    key: '_handleLiveDvr',\n    value: function _handleLiveDvr(loadRequestData) {\n      if (this._player.isDvr() && loadRequestData.currentTime === LIVE_EDGE) {\n        this._shouldSeekToLiveEdge = true;\n        this._logger.debug('Live DVR will seek to live edge? ' + this._shouldSeekToLiveEdge);\n      }\n    }\n  }, {\n    key: '_maybeSetDrmLicenseUrl',\n    value: function _maybeSetDrmLicenseUrl(source) {\n      var _this3 = this;\n\n      if (source.drmData) {\n        var data = source.drmData.find(function (data) {\n          return data.scheme === DrmScheme.WIDEVINE;\n        });\n        if (data) {\n          this._playerManager.setMediaPlaybackInfoHandler(function (loadRequest, playbackConfig) {\n            playbackConfig.protectionSystem = cast.framework.ContentProtection.WIDEVINE;\n            playbackConfig.licenseUrl = data.licenseUrl;\n            _this3._logger.debug('Set drm license url', playbackConfig);\n            return playbackConfig;\n          });\n        }\n      }\n    }\n  }, {\n    key: '_onPlayEvent',\n    value: function _onPlayEvent() {\n      if (this._firstPlay) {\n        if (this._shouldSeekToLiveEdge) {\n          this._player.seekToLiveEdge();\n        }\n        if (!this._shouldAutoPlay) {\n          this._playerManager.pause();\n        } else {\n          this._player.play();\n        }\n        this._firstPlay = false;\n      } else {\n        this._player.play();\n      }\n    }\n  }, {\n    key: '_onPauseEvent',\n    value: function _onPauseEvent() {\n      this._player.pause();\n    }\n  }, {\n    key: '_onPlayerLoadCompleteEvent',\n    value: function _onPlayerLoadCompleteEvent() {\n      var _this4 = this;\n\n      this._player.load();\n      this._player.ready().then(function () {\n        return _this4._tracksManager.setInitialTracks();\n      });\n    }\n  }, {\n    key: '_onSystemVolumeChangedEvent',\n    value: function _onSystemVolumeChangedEvent(systemVolumeChangedEvent) {\n      var data = systemVolumeChangedEvent.data;\n      if (this._player.volume !== data.level) {\n        this._player.volume = data.level;\n      }\n      if (this._player.muted !== data.muted) {\n        this._player.muted = data.muted;\n      }\n    }\n  }, {\n    key: '_onCustomMessage',\n    value: function _onCustomMessage(customMessageEvent) {\n      var customMessage = customMessageEvent.data;\n      this._logger.debug('Custom message received', customMessage);\n      switch (customMessage.type) {\n        case CustomMessageType.ACTION:\n          this._handleCustomAction(customMessage);\n          break;\n        default:\n          break;\n      }\n    }\n  }, {\n    key: '_handleCustomAction',\n    value: function _handleCustomAction(customAction) {\n      switch (customAction.action) {\n        case CustomActionType.SKIP_AD:\n          this._adsManager.skipAd();\n          break;\n        default:\n          break;\n      }\n    }\n  }, {\n    key: '_maybeCreateVmapAdsRequest',\n    value: function _maybeCreateVmapAdsRequest(media) {\n      if (media.customData && media.customData.vmapAdsRequest) {\n        media.vmapAdsRequest = media.customData.vmapAdsRequest;\n      }\n    }\n  }, {\n    key: '_maybeReplaceAdTagTimestamp',\n    value: function _maybeReplaceAdTagTimestamp(media) {\n      var replaceTimestamp = function replaceTimestamp(adtag) {\n        if (adtag && regex.test(adtag)) {\n          var match = adtag.match(regex);\n          return adtag.replace(match[1], Date.now());\n        }\n        return adtag;\n      };\n      var regex = /correlator=(\\[timestamp\\])/;\n      if (media.breakClips) {\n        var breakClips = media.breakClips;\n        breakClips.forEach(function (breakClip) {\n          if (breakClip.vastAdsRequest && breakClip.vastAdsRequest.adTagUrl) {\n            breakClip.vastAdsRequest.adTagUrl = replaceTimestamp(breakClip.vastAdsRequest.adTagUrl);\n          }\n        });\n      }\n      if (media.vmapAdsRequest) {\n        media.vmapAdsRequest.adTagUrl = replaceTimestamp(media.vmapAdsRequest.adTagUrl);\n      }\n    }\n  }]);\n\n  return ReceiverManager;\n}();\n\nexports.ReceiverManager = ReceiverManager;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PlayerLoader = exports.CAST_MEDIA_PLAYER_TAG = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _kalturaPlayerJs = __webpack_require__(0);\n\nvar _castEngine = __webpack_require__(5);\n\nvar _defaultPlayerConfig = __webpack_require__(6);\n\nvar _error = __webpack_require__(7);\n\nvar _errorType = __webpack_require__(8);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Utils = _kalturaPlayerJs.core.Utils,\n    unRegisterEngine = _kalturaPlayerJs.core.unRegisterEngine,\n    registerEngine = _kalturaPlayerJs.core.registerEngine,\n    EngineType = _kalturaPlayerJs.core.EngineType;\nvar CAST_MEDIA_PLAYER_TAG = exports.CAST_MEDIA_PLAYER_TAG = 'cast-media-player';\nvar PLAYER_CONTAINER = 'kaltura-receiver-player-container';\n\nvar PlayerLoader = function () {\n  function PlayerLoader() {\n    _classCallCheck(this, PlayerLoader);\n  }\n\n  _createClass(PlayerLoader, null, [{\n    key: 'loadPlayer',\n    value: function loadPlayer(config) {\n      var castMediaPlayerEl = Utils.Dom.getElementsByTagName(CAST_MEDIA_PLAYER_TAG)[0];\n      if (castMediaPlayerEl) {\n        var castMediaElement = castMediaPlayerEl.getMediaElement();\n        castMediaElement.style.position = 'absolute';\n        var playerContainerEl = Utils.Dom.createElement('div');\n        playerContainerEl.id = PLAYER_CONTAINER;\n        Utils.Dom.appendChild(document.body, playerContainerEl);\n        unRegisterEngine(EngineType.HTML5);\n        registerEngine(EngineType.CAST, _castEngine.CastEngine);\n        var playerConfig = Utils.Object.mergeDeep({ targetId: PLAYER_CONTAINER }, _defaultPlayerConfig.DefaultPlayerConfig, config);\n        var player = (0, _kalturaPlayerJs.setup)(playerConfig);\n        Utils.Dom.prependTo(playerContainerEl, castMediaElement.parentNode);\n        return player;\n      } else {\n        throw new _error.ReceiverError(_errorType.ErrorType.CAST_ELEMENT_NOT_FOUND);\n      }\n    }\n  }]);\n\n  return PlayerLoader;\n}();\n\nexports.PlayerLoader = PlayerLoader;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NAME = exports.VERSION = exports.Receiver = undefined;\n\nvar _receiverManagerApi = __webpack_require__(4);\n\nexports.Receiver = _receiverManagerApi.ReceiverManagerAPI;\nexports.VERSION = \"0.1.1\";\nexports.NAME = \"@playkit-js/playkit-js-cast-receiver\";\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReceiverManagerAPI = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _receiverManager = __webpack_require__(1);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar receiverManager = void 0;\n\nvar ReceiverManagerAPI = function () {\n  function ReceiverManagerAPI(config) {\n    _classCallCheck(this, ReceiverManagerAPI);\n\n    receiverManager = new _receiverManager.ReceiverManager(config);\n  }\n\n  _createClass(ReceiverManagerAPI, [{\n    key: 'start',\n    value: function start() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      receiverManager.start(options);\n    }\n  }, {\n    key: 'onLoad',\n    value: function onLoad(loadRequestData) {\n      return receiverManager.onLoad(loadRequestData);\n    }\n  }, {\n    key: 'onStop',\n    value: function onStop(requestData) {\n      return receiverManager.onStop(requestData);\n    }\n  }, {\n    key: 'onMediaStatus',\n    value: function onMediaStatus(mediaStatus) {\n      return receiverManager.onMediaStatus(mediaStatus);\n    }\n  }, {\n    key: 'addEventListener',\n    value: function addEventListener(type, listener) {\n      receiverManager.getPlayer().addEventListener(type, listener);\n    }\n  }, {\n    key: 'removeEventListener',\n    value: function removeEventListener(type, listener) {\n      receiverManager.getPlayer().removeEventListener(type, listener);\n    }\n  }]);\n\n  return ReceiverManagerAPI;\n}();\n\nexports.ReceiverManagerAPI = ReceiverManagerAPI;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CastEngine = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _kalturaPlayerJs = __webpack_require__(0);\n\nvar _playerLoader = __webpack_require__(2);\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Track = _kalturaPlayerJs.core.Track,\n    Utils = _kalturaPlayerJs.core.Utils,\n    FakeEvent = _kalturaPlayerJs.core.FakeEvent,\n    MediaType = _kalturaPlayerJs.core.MediaType,\n    getLogger = _kalturaPlayerJs.core.getLogger,\n    FakeEventTarget = _kalturaPlayerJs.core.FakeEventTarget,\n    EventManager = _kalturaPlayerJs.core.EventManager,\n    EventType = _kalturaPlayerJs.core.EventType,\n    AudioTrack = _kalturaPlayerJs.core.AudioTrack,\n    TextTrack = _kalturaPlayerJs.core.TextTrack,\n    AbrMode = _kalturaPlayerJs.core.AbrMode,\n    MimeType = _kalturaPlayerJs.core.MimeType;\n\nvar CastEngine = function (_FakeEventTarget) {\n  _inherits(CastEngine, _FakeEventTarget);\n\n  _createClass(CastEngine, null, [{\n    key: 'canPlaySource',\n    value: function canPlaySource(source) {\n      var mimeType = source.mimetype.toLowerCase();\n      var supported = CastEngine._supportedMimeTypes.includes(mimeType);\n      if (supported) {\n        if (source.drmData) {\n          return MimeType.DASH.includes(mimeType);\n        }\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: 'createEngine',\n    value: function createEngine(source, config) {\n      return new this(source, config);\n    }\n  }, {\n    key: 'id',\n    get: function get() {\n      return 'cast';\n    }\n  }]);\n\n  function CastEngine(source, config) {\n    _classCallCheck(this, CastEngine);\n\n    var _this = _possibleConstructorReturn(this, (CastEngine.__proto__ || Object.getPrototypeOf(CastEngine)).call(this));\n\n    _this._isLoaded = false;\n    _this._tracks = [];\n    _this._volume = 1;\n    _this._muted = false;\n    _this._paused = false;\n    _this._seeking = false;\n    _this._ended = false;\n    _this._mediaElementEvents = [EventType.ABORT, EventType.CAN_PLAY, EventType.CAN_PLAY_THROUGH, EventType.DURATION_CHANGE, EventType.EMPTIED, EventType.ENDED, EventType.LOADED_DATA, EventType.LOADED_METADATA, EventType.LOAD_START, EventType.PAUSE, EventType.PLAY, EventType.PLAYING, EventType.PROGRESS, EventType.RATE_CHANGE, EventType.SEEKED, EventType.SEEKING, EventType.STALLED, EventType.TIME_UPDATE, EventType.SUSPEND, EventType.WAITING];\n\n    _this._context = cast.framework.CastReceiverContext.getInstance();\n    _this._playerManager = _this._context.getPlayerManager();\n    _this._eventManager = new EventManager();\n    _this._createVideoElement();\n    _this._init(source, config);\n    return _this;\n  }\n\n  _createClass(CastEngine, [{\n    key: 'restore',\n    value: function restore(source, config) {\n      this.reset();\n      this._init(source, config);\n    }\n  }, {\n    key: 'attach',\n    value: function attach() {\n      var _this2 = this;\n\n      var videoElement = this.getVideoElement();\n      this._eventManager.listen(videoElement, EventType.SEEKED, function () {\n        return _this2._seeking = false;\n      });\n      this._eventManager.listen(videoElement, EventType.SEEKING, function () {\n        return _this2._seeking = true;\n      });\n      this._eventManager.listen(videoElement, EventType.ENDED, function () {\n        _this2._ended = true;\n        // Receiver has a problem where the current time isn't equals to the duration when\n        // playback is ended. This prevent from analytics plugins to report 100% reached.\n        // So we're trigger time update event again on ended and take care to handle this state also in the\n        // current time setter.\n        if (!_this2.isLive()) {\n          _this2.dispatchEvent(new FakeEvent(EventType.TIME_UPDATE));\n        }\n      });\n      if (this.isLive()) {\n        this._eventManager.listen(videoElement, EventType.TIME_UPDATE, function () {\n          return _this2._playerManager.broadcastStatus(true);\n        });\n      }\n      this._mediaElementEvents.forEach(function (mediaElementEvent) {\n        return _this2._eventManager.listen(videoElement, mediaElementEvent, function () {\n          return _this2.dispatchEvent(new FakeEvent(mediaElementEvent));\n        });\n      });\n    }\n  }, {\n    key: 'detach',\n    value: function detach() {\n      // Empty implementation\n    }\n  }, {\n    key: 'getVideoElement',\n    value: function getVideoElement() {\n      return this._el;\n    }\n  }, {\n    key: 'load',\n    value: function load(startTime) {\n      CastEngine._logger.debug('Load start', startTime);\n      this._isLoaded = true;\n      this._parseTracks();\n      this.dispatchEvent(new FakeEvent(EventType.ABR_MODE_CHANGED, { mode: AbrMode.AUTO }));\n      CastEngine._logger.debug('Load end', this._tracks);\n      return Promise.resolve({ tracks: this._tracks });\n    }\n  }, {\n    key: 'play',\n    value: function play() {\n      this._paused = false;\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n      this._paused = true;\n    }\n  }, {\n    key: 'hideTextTrack',\n    value: function hideTextTrack() {\n      // Empty implementation\n    }\n  }, {\n    key: 'selectTextTrack',\n    value: function selectTextTrack(textTrack) {\n      this.dispatchEvent(new FakeEvent(EventType.TEXT_TRACK_CHANGED, { selectedTextTrack: textTrack }));\n    }\n  }, {\n    key: 'selectAudioTrack',\n    value: function selectAudioTrack(audioTrack) {\n      this.dispatchEvent(new FakeEvent(EventType.AUDIO_TRACK_CHANGED, { selectedAudioTrack: audioTrack }));\n    }\n  }, {\n    key: 'selectVideoTrack',\n    value: function selectVideoTrack(videoTrack) {\n      this.dispatchEvent(new FakeEvent(EventType.VIDEO_TRACK_CHANGED, { selectedVideoTrack: videoTrack }));\n    }\n  }, {\n    key: 'enableAdaptiveBitrate',\n    value: function enableAdaptiveBitrate() {\n      // Empty implementation\n    }\n  }, {\n    key: 'isAdaptiveBitrateEnabled',\n    value: function isAdaptiveBitrateEnabled() {\n      return true;\n    }\n  }, {\n    key: 'getSelectedSource',\n    value: function getSelectedSource() {\n      return Utils.Object.copyDeep(this._source);\n    }\n  }, {\n    key: 'isLive',\n    value: function isLive() {\n      return this._config.sources.type === MediaType.LIVE;\n    }\n  }, {\n    key: 'seekToLiveEdge',\n    value: function seekToLiveEdge() {\n      var range = this._playerManager.getLiveSeekableRange();\n      if (range) {\n        this._playerManager.seek(range.end);\n      }\n    }\n  }, {\n    key: 'getStartTimeOfDvrWindow',\n    value: function getStartTimeOfDvrWindow() {\n      var range = this._playerManager.getLiveSeekableRange();\n      if (range) {\n        return range.start;\n      }\n      return 0;\n    }\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this._eventManager.removeAll();\n      this._tracks = [];\n      this._isLoaded = false;\n      this._paused = false;\n      this._seeking = false;\n      this._ended = false;\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this._eventManager.destroy();\n      this._tracks = [];\n      this._isLoaded = false;\n      this._mediaElementEvents = [];\n      this._volume = 1;\n      this._muted = false;\n      this._paused = false;\n      this._seeking = false;\n      this._ended = false;\n      if (this._el) {\n        Utils.Dom.removeAttribute(this._el, 'src');\n        Utils.Dom.removeChild(this._el.parentNode, this._el);\n      }\n    }\n  }, {\n    key: '_createVideoElement',\n    value: function _createVideoElement() {\n      var castMediaPlayerEl = document.getElementsByTagName(_playerLoader.CAST_MEDIA_PLAYER_TAG)[0];\n      if (castMediaPlayerEl) {\n        this._el = castMediaPlayerEl.getMediaElement();\n      }\n    }\n  }, {\n    key: '_init',\n    value: function _init(source, config) {\n      this._source = source;\n      this._config = config;\n      this.attach();\n    }\n  }, {\n    key: '_parseTracks',\n    value: function _parseTracks() {\n      var audioTracksManager = this._playerManager.getAudioTracksManager();\n      var castAudioTracks = audioTracksManager.getTracks();\n      var audioTracks = this._parseAudioTracks(castAudioTracks);\n\n      var textTracksManager = this._playerManager.getTextTracksManager();\n      var castTextTracks = textTracksManager.getTracks();\n      var textTracks = this._parseTextTracks(castTextTracks);\n\n      this._tracks = audioTracks.concat(textTracks);\n    }\n  }, {\n    key: '_parseTextTracks',\n    value: function _parseTextTracks(castTextTracks) {\n      var textTracks = [];\n      castTextTracks.forEach(function (track) {\n        var settings = {\n          id: track.trackId,\n          index: track.trackId - 1,\n          label: track.name,\n          language: track.language,\n          kind: track.subType || 'subtitles',\n          active: false\n        };\n        textTracks.push(new TextTrack(settings));\n      });\n      return textTracks;\n    }\n  }, {\n    key: '_parseAudioTracks',\n    value: function _parseAudioTracks(castAudioTracks) {\n      var audioTracks = [];\n      castAudioTracks.forEach(function (track) {\n        var settings = {\n          id: track.trackId,\n          index: track.trackId - 1,\n          label: track.name,\n          language: track.language,\n          active: false\n        };\n        audioTracks.push(new AudioTrack(settings));\n      });\n      return audioTracks;\n    }\n  }, {\n    key: 'id',\n    get: function get() {\n      return CastEngine.id;\n    }\n  }, {\n    key: 'currentTime',\n    set: function set(value) {\n      // Empty implementation\n    },\n    get: function get() {\n      if (this.isLive()) {\n        return this._playerManager.getCurrentTimeSec() - this.getStartTimeOfDvrWindow();\n      }\n      if (this._ended) {\n        return this._playerManager.getDurationSec();\n      }\n      return this._playerManager.getCurrentTimeSec();\n    }\n  }, {\n    key: 'muted',\n    set: function set(value) {\n      this._muted = value;\n    },\n    get: function get() {\n      return this._muted;\n    }\n  }, {\n    key: 'volume',\n    set: function set(value) {\n      this._volume = value;\n      this.dispatchEvent(EventType.VOLUME_CHANGE);\n    },\n    get: function get() {\n      return this._volume;\n    }\n  }, {\n    key: 'paused',\n    get: function get() {\n      return this._paused;\n    }\n  }, {\n    key: 'seeking',\n    get: function get() {\n      return this._seeking;\n    }\n  }, {\n    key: 'buffered',\n    get: function get() {\n      return [];\n    }\n  }, {\n    key: 'duration',\n    get: function get() {\n      if (this.isLive()) {\n        var range = this._playerManager.getLiveSeekableRange();\n        if (range) {\n          return range.end - this.getStartTimeOfDvrWindow();\n        }\n      }\n      return this._playerManager.getDurationSec();\n    }\n  }, {\n    key: 'src',\n    get: function get() {\n      return this._isLoaded ? this._source.url : '';\n    }\n  }, {\n    key: 'playsinline',\n    set: function set(playsinline) {\n      // Empty implementation\n    },\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: 'playbackRate',\n    set: function set(playbackRate) {\n      // Empty implementation\n    },\n    get: function get() {\n      return this._playerManager.getPlaybackRate();\n    }\n  }, {\n    key: 'playbackRates',\n    get: function get() {\n      return [1];\n    }\n  }, {\n    key: 'defaultPlaybackRate',\n    get: function get() {\n      return 1;\n    }\n  }, {\n    key: 'crossOrigin',\n    set: function set(crossOrigin) {\n      // Empty implementation\n    },\n    get: function get() {\n      // Empty implementation\n    }\n  }, {\n    key: 'ended',\n    get: function get() {\n      return this._ended;\n    }\n  }], [{\n    key: 'runCapabilities',\n    value: function runCapabilities() {\n      // Empty implementation\n    }\n  }, {\n    key: 'prepareVideoElement',\n    value: function prepareVideoElement() {\n      // Empty implementation\n    }\n  }, {\n    key: 'getCapabilities',\n    value: function getCapabilities() {\n      return Promise.resolve(_defineProperty({}, CastEngine.id, {\n        autoplay: true,\n        mutedAutoPlay: true\n      }));\n    }\n  }]);\n\n  return CastEngine;\n}(FakeEventTarget);\n\nCastEngine._logger = getLogger('CastEngine');\nCastEngine._supportedMimeTypes = [].concat(_toConsumableArray(MimeType.HLS), _toConsumableArray(MimeType.DASH), _toConsumableArray(MimeType.PROGRESSIVE), _toConsumableArray(MimeType.SMOOTH_STREAMING));\nexports.CastEngine = CastEngine;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DefaultPlayerConfig = undefined;\n\nvar _kalturaPlayerJs = __webpack_require__(0);\n\nvar StreamType = _kalturaPlayerJs.core.StreamType,\n    EngineType = _kalturaPlayerJs.core.EngineType;\n\n\nvar DefaultPlayerConfig = {\n  playback: {\n    autoplay: false,\n    preload: 'none',\n    disableUserCache: true,\n    streamPriority: [{\n      engine: EngineType.CAST,\n      format: StreamType.HLS\n    }, {\n      engine: EngineType.CAST,\n      format: StreamType.DASH\n    }, {\n      engine: EngineType.CAST,\n      format: StreamType.PROGRESSIVE\n    }]\n  },\n  ui: {\n    disable: true\n  }\n};\n\nexports.DefaultPlayerConfig = DefaultPlayerConfig;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ReceiverError = function ReceiverError(type) {\n  _classCallCheck(this, ReceiverError);\n\n  this.code = type.code;\n  this.description = type.description;\n};\n\nexports.ReceiverError = ReceiverError;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ErrorType = {\n  CAST_ELEMENT_NOT_FOUND: {\n    code: 100020,\n    description: \"<cast-media-element> tag isn't found in the DOM\"\n  }\n};\n\nexports.ErrorType = ErrorType;\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReceiverTracksManager = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _kalturaPlayerJs = __webpack_require__(0);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar TextStyleConverter = _kalturaPlayerJs.cast.TextStyleConverter;\nvar TrackType = _kalturaPlayerJs.core.TrackType,\n    getLogger = _kalturaPlayerJs.core.getLogger;\n\nvar ReceiverTracksManager = function () {\n  function ReceiverTracksManager(player) {\n    _classCallCheck(this, ReceiverTracksManager);\n\n    this._logger = getLogger('ReceiverTracksManager');\n\n    this._playerManager = cast.framework.CastReceiverContext.getInstance().getPlayerManager();\n    this._player = player;\n    this._attachListeners();\n  }\n\n  _createClass(ReceiverTracksManager, [{\n    key: 'setInitialTracks',\n    value: function setInitialTracks() {\n      var mediaInfo = this._playerManager.getMediaInformation();\n      this._logger.debug('Set initial tracks', mediaInfo.customData);\n      if (mediaInfo.customData) {\n        this._setInitialAudioTrack(mediaInfo.customData.audioLanguage);\n        this._setInitialTextTrack(mediaInfo.customData.textLanguage);\n      }\n    }\n  }, {\n    key: '_attachListeners',\n    value: function _attachListeners() {\n      var _this = this;\n\n      this._playerManager.addEventListener(cast.framework.events.EventType.REQUEST_EDIT_TRACKS_INFO, function (requestEvent) {\n        var activeTrackIds = requestEvent.requestData.activeTrackIds;\n        if (activeTrackIds) {\n          _this._handleAudioTrackSelection(activeTrackIds);\n          _this._handleTextTrackSelection(activeTrackIds);\n        } else {\n          var textTrackStyle = requestEvent.requestData.textTrackStyle;\n          _this._handleTextStyleSelection(textTrackStyle);\n        }\n      });\n    }\n  }, {\n    key: '_handleTextTrackSelection',\n    value: function _handleTextTrackSelection(activeTrackIds) {\n      var textTracks = this._player.getTracks(TrackType.TEXT);\n      var activeTextTrack = textTracks.find(function (t) {\n        return t.active;\n      });\n      var nextActiveTextTrack = textTracks.find(function (t) {\n        return activeTrackIds.includes(t.id);\n      });\n      if (nextActiveTextTrack) {\n        this._player.selectTrack(nextActiveTextTrack);\n      } else if (activeTextTrack.language !== 'off') {\n        var offTrack = textTracks.find(function (t) {\n          return t.language === 'off';\n        });\n        this._player.selectTrack(offTrack);\n      }\n    }\n  }, {\n    key: '_handleAudioTrackSelection',\n    value: function _handleAudioTrackSelection(activeTrackIds) {\n      var audioTracks = this._player.getTracks(TrackType.AUDIO);\n      var activeAudioTrack = audioTracks.find(function (t) {\n        return t.active;\n      });\n      var nextActiveAudioTrack = audioTracks.find(function (t) {\n        return activeTrackIds.includes(t.id);\n      });\n      if (activeAudioTrack.id !== nextActiveAudioTrack.id) {\n        this._player.selectTrack(nextActiveAudioTrack);\n      }\n    }\n  }, {\n    key: '_handleTextStyleSelection',\n    value: function _handleTextStyleSelection(textStyle) {\n      this._player.textStyle = TextStyleConverter.toPlayerTextStyle(textStyle);\n    }\n  }, {\n    key: '_setInitialTextTrack',\n    value: function _setInitialTextTrack(textLanguage) {\n      var textTracksManager = this._playerManager.getTextTracksManager();\n      if (textLanguage) {\n        this._logger.debug('Set initial text track - setActiveByLanguage', textLanguage);\n        textTracksManager.setActiveByLanguage(textLanguage);\n      }\n    }\n  }, {\n    key: '_setInitialAudioTrack',\n    value: function _setInitialAudioTrack(audioLanguage) {\n      var audioTracksManager = this._playerManager.getAudioTracksManager();\n      var audioTracks = audioTracksManager.getTracks();\n      this._logger.debug('Set initial audio track', audioLanguage, audioTracks);\n      if (audioTracks.length > 0) {\n        if (audioLanguage) {\n          this._logger.debug('Set initial audio track - setActiveByLanguage', audioLanguage);\n          audioTracksManager.setActiveByLanguage(audioLanguage);\n        } else {\n          var audioTrackId = audioTracks[0].trackId;\n          var audioTrack = this._player.getTracks(TrackType.AUDIO).find(function (t) {\n            return t.id === audioTrackId;\n          });\n          if (audioTrack) {\n            this._logger.debug('Set initial audio track - setActiveById', audioTrackId);\n            audioTracksManager.setActiveById(audioTrackId);\n            this._player.selectTrack(audioTrack);\n          }\n        }\n      }\n    }\n  }]);\n\n  return ReceiverTracksManager;\n}();\n\nexports.ReceiverTracksManager = ReceiverTracksManager;\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReceiverAdsManager = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _kalturaPlayerJs = __webpack_require__(0);\n\nvar _receiverManager = __webpack_require__(1);\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar EventType = _kalturaPlayerJs.core.EventType,\n    Ad = _kalturaPlayerJs.core.Ad,\n    AdBreak = _kalturaPlayerJs.core.AdBreak,\n    AdBreakType = _kalturaPlayerJs.core.AdBreakType,\n    getLogger = _kalturaPlayerJs.core.getLogger;\nvar CustomEventMessage = _kalturaPlayerJs.cast.CustomEventMessage;\n\nvar ReceiverAdsManager = function () {\n  function ReceiverAdsManager(player) {\n    _classCallCheck(this, ReceiverAdsManager);\n\n    this._logger = getLogger('ReceiverAdsManager');\n    this._timePercentEvent = {\n      AD_REACHED_25_PERCENT: false,\n      AD_REACHED_50_PERCENT: false,\n      AD_REACHED_75_PERCENT: false\n    };\n\n    this._context = cast.framework.CastReceiverContext.getInstance();\n    this._playerManager = this._context.getPlayerManager();\n    this._player = player;\n    this._bindMethods();\n    this._attachListeners();\n  }\n\n  _createClass(ReceiverAdsManager, [{\n    key: 'skipAd',\n    value: function skipAd() {\n      this._logger.debug('Skip ad');\n      var requestData = new cast.framework.messages.RequestData(cast.framework.messages.MessageType.SKIP_AD);\n      this._playerManager.sendLocalMediaRequest(requestData);\n    }\n  }, {\n    key: '_bindMethods',\n    value: function _bindMethods() {\n      this._onPlayerLoadComplete = this._onPlayerLoadComplete.bind(this);\n      this._onBreakStarted = this._onBreakStarted.bind(this);\n      this._onBreakEnded = this._onBreakEnded.bind(this);\n      this._onBreakClipLoading = this._onBreakClipLoading.bind(this);\n      this._onBreakClipStarted = this._onBreakClipStarted.bind(this);\n      this._onBreakClipEnded = this._onBreakClipEnded.bind(this);\n      this._onAdPaused = this._onAdPaused.bind(this);\n      this._onAdResumed = this._onAdResumed.bind(this);\n      this._onAdProgress = this._onAdProgress.bind(this);\n      this._onMuteChange = this._onMuteChange.bind(this);\n      this._onVolumeChange = this._onVolumeChange.bind(this);\n    }\n  }, {\n    key: '_attachListeners',\n    value: function _attachListeners() {\n      var _adLifecycleEventHand,\n          _adTrackingEventHandl,\n          _playerEventHandlers,\n          _this = this;\n\n      this._adLifecycleEventHandlers = (_adLifecycleEventHand = {}, _defineProperty(_adLifecycleEventHand, cast.framework.events.EventType.PLAYER_LOAD_COMPLETE, this._onPlayerLoadComplete), _defineProperty(_adLifecycleEventHand, cast.framework.events.EventType.BREAK_STARTED, this._onBreakStarted), _defineProperty(_adLifecycleEventHand, cast.framework.events.EventType.BREAK_ENDED, this._onBreakEnded), _defineProperty(_adLifecycleEventHand, cast.framework.events.EventType.BREAK_CLIP_LOADING, this._onBreakClipLoading), _defineProperty(_adLifecycleEventHand, cast.framework.events.EventType.BREAK_CLIP_STARTED, this._onBreakClipStarted), _defineProperty(_adLifecycleEventHand, cast.framework.events.EventType.BREAK_CLIP_ENDED, this._onBreakClipEnded), _adLifecycleEventHand);\n      this._adTrackingEventHandlers = (_adTrackingEventHandl = {}, _defineProperty(_adTrackingEventHandl, cast.framework.events.EventType.PAUSE, this._onAdPaused), _defineProperty(_adTrackingEventHandl, cast.framework.events.EventType.PLAY, this._onAdResumed), _adTrackingEventHandl);\n      this._playerEventHandlers = (_playerEventHandlers = {}, _defineProperty(_playerEventHandlers, EventType.MUTE_CHANGE, this._onMuteChange), _defineProperty(_playerEventHandlers, EventType.VOLUME_CHANGE, this._onVolumeChange), _playerEventHandlers);\n      Object.keys(this._adLifecycleEventHandlers).forEach(function (event) {\n        return _this._playerManager.addEventListener(event, _this._adLifecycleEventHandlers[event]);\n      });\n    }\n  }, {\n    key: '_onPlayerLoadComplete',\n    value: function _onPlayerLoadComplete() {\n      var positions = [];\n      var breakManager = this._playerManager.getBreakManager();\n      if (breakManager) {\n        var breaks = breakManager.getBreaks();\n        if (breaks && breaks.length > 0) {\n          breaks.forEach(function (b) {\n            return positions.push(b.position);\n          });\n          this._sendEventAndCustomMessage(this._player.Event.AD_MANIFEST_LOADED, { adBreaksPosition: positions });\n        }\n      }\n    }\n  }, {\n    key: '_onBreakStarted',\n    value: function _onBreakStarted(breaksEvent) {\n      this._toggleAdBreakListeners(true);\n      var adBreakOptions = this._getAdBreakOptions(breaksEvent);\n      var adBreak = new AdBreak(adBreakOptions);\n      this._sendEventAndCustomMessage(this._player.Event.AD_BREAK_START, { adBreak: adBreak });\n      this._adBreak = adBreak;\n    }\n  }, {\n    key: '_onBreakEnded',\n    value: function _onBreakEnded(breaksEvent) {\n      this._toggleAdBreakListeners(false);\n      this._sendEventAndCustomMessage(this._player.Event.AD_BREAK_END);\n      this._adBreak = null;\n      var breaks = this._playerManager.getBreakManager().getBreaks();\n      var index = breaks.findIndex(function (b) {\n        return b.id === breaksEvent.breakId;\n      });\n      if (index + 1 === breaks.length) {\n        this._sendEventAndCustomMessage(this._player.Event.ALL_ADS_COMPLETED);\n      }\n    }\n  }, {\n    key: '_onBreakClipLoading',\n    value: function _onBreakClipLoading(breaksEvent) {\n      var adOptions = this._getAdOptions(breaksEvent);\n      var ad = new Ad(breaksEvent.breakClipId, adOptions);\n      this._sendEventAndCustomMessage(this._player.Event.AD_LOADED, { ad: ad });\n      this._ad = ad;\n    }\n  }, {\n    key: '_onBreakClipStarted',\n    value: function _onBreakClipStarted() {\n      this._sendEventAndCustomMessage(this._player.Event.AD_STARTED);\n      this._adIsPlaying = true;\n    }\n  }, {\n    key: '_onBreakClipEnded',\n    value: function _onBreakClipEnded() {\n      this._sendEventAndCustomMessage(this._player.Event.AD_COMPLETED);\n      this._adIsPlaying = false;\n      this._adCanSkipTriggered = false;\n      this._ad = null;\n    }\n  }, {\n    key: '_onAdPaused',\n    value: function _onAdPaused() {\n      this._sendEventAndCustomMessage(this._player.Event.AD_PAUSED);\n      this._adIsPlaying = false;\n    }\n  }, {\n    key: '_onAdResumed',\n    value: function _onAdResumed() {\n      this._sendEventAndCustomMessage(this._player.Event.AD_RESUMED);\n      this._adIsPlaying = true;\n    }\n  }, {\n    key: '_onAdProgress',\n    value: function _onAdProgress() {\n      if (!this._ad) return;\n      var adDuration = this._playerManager.getBreakClipDurationSec();\n      var adCurrentTime = this._playerManager.getBreakClipCurrentTimeSec();\n      var percent = adCurrentTime / adDuration;\n      if (!this._timePercentEvent.AD_REACHED_25_PERCENT && percent >= 0.25) {\n        this._timePercentEvent.AD_REACHED_25_PERCENT = true;\n        this._sendEventAndCustomMessage(this._player.Event.AD_FIRST_QUARTILE);\n      }\n      if (!this._timePercentEvent.AD_REACHED_50_PERCENT && percent >= 0.5) {\n        this._timePercentEvent.AD_REACHED_50_PERCENT = true;\n        this._sendEventAndCustomMessage(this._player.Event.AD_MIDPOINT);\n      }\n      if (!this._timePercentEvent.AD_REACHED_75_PERCENT && percent >= 0.75) {\n        this._timePercentEvent.AD_REACHED_75_PERCENT = true;\n        this._sendEventAndCustomMessage(this._player.Event.AD_THIRD_QUARTILE);\n      }\n      if (!this._adCanSkipTriggered && this._ad.skippable) {\n        if (adCurrentTime >= this._ad.skipOffset) {\n          this._sendEventAndCustomMessage(this._player.Event.AD_CAN_SKIP);\n          this._adCanSkipTriggered = true;\n        }\n      }\n      this._sendEventAndCustomMessage(this._player.Event.AD_PROGRESS, {\n        adProgress: {\n          currentTime: adCurrentTime,\n          duration: adDuration\n        }\n      });\n    }\n  }, {\n    key: '_onMuteChange',\n    value: function _onMuteChange() {\n      if (this._player.muted) {\n        this._sendEventAndCustomMessage(this._player.Event.AD_MUTED);\n      }\n    }\n  }, {\n    key: '_onVolumeChange',\n    value: function _onVolumeChange() {\n      this._sendEventAndCustomMessage(this._player.Event.AD_VOLUME_CHANGED);\n    }\n  }, {\n    key: '_toggleAdBreakListeners',\n    value: function _toggleAdBreakListeners(toggle) {\n      var _this2 = this;\n\n      if (toggle) {\n        Object.keys(this._adTrackingEventHandlers).forEach(function (event) {\n          return _this2._playerManager.addEventListener(event, _this2._adTrackingEventHandlers[event]);\n        });\n        Object.keys(this._playerEventHandlers).forEach(function (event) {\n          return _this2._player.addEventListener(event, _this2._playerEventHandlers[event]);\n        });\n        this._adProgressIntervalId = setInterval(this._onAdProgress, 300);\n      } else {\n        Object.keys(this._adTrackingEventHandlers).forEach(function (event) {\n          return _this2._playerManager.removeEventListener(event, _this2._adTrackingEventHandlers[event]);\n        });\n        Object.keys(this._playerEventHandlers).forEach(function (event) {\n          return _this2._player.removeEventListener(event, _this2._playerEventHandlers[event]);\n        });\n        clearInterval(this._adProgressIntervalId);\n        this._adProgressIntervalId = null;\n      }\n    }\n  }, {\n    key: '_getAdBreakOptions',\n    value: function _getAdBreakOptions(breaksEvent) {\n      var options = {};\n      var currentBreak = this._playerManager.getBreakManager().getBreakById(breaksEvent.breakId);\n      if (currentBreak) {\n        options.position = currentBreak.position;\n        options.type = this._getAdBreakTypeByPosition(currentBreak.position);\n        options.numAds = currentBreak.breakClipIds.length;\n      }\n      return options;\n    }\n  }, {\n    key: '_getAdBreakTypeByPosition',\n    value: function _getAdBreakTypeByPosition(position) {\n      switch (position) {\n        case 0:\n          return AdBreakType.PRE;\n        case -1:\n          return AdBreakType.POST;\n        default:\n          return AdBreakType.MID;\n      }\n    }\n  }, {\n    key: '_getAdOptions',\n    value: function _getAdOptions(breaksEvent) {\n      var options = {};\n      var currentBreak = this._playerManager.getBreakManager().getBreakById(breaksEvent.breakId);\n      var currentBreakClip = this._playerManager.getBreakManager().getBreakClipById(breaksEvent.breakClipId);\n      options.url = currentBreakClip.contentId;\n      options.contentType = currentBreakClip.contentType;\n      options.title = currentBreakClip.title;\n      options.position = currentBreak.breakClipIds.indexOf(currentBreakClip.id) + 1;\n      options.duration = currentBreakClip.duration;\n      options.clickThroughUrl = currentBreakClip.clickThroughUrl;\n      options.posterUrl = currentBreakClip.posterUrl;\n      options.skipOffset = currentBreakClip.whenSkippable;\n      options.linear = true;\n      return options;\n    }\n  }, {\n    key: '_sendEventAndCustomMessage',\n    value: function _sendEventAndCustomMessage(event, payload) {\n      this._logger.debug(event.toUpperCase(), payload);\n      this._player.dispatchEvent(event, payload);\n      this._context.sendCustomMessage(_receiverManager.CUSTOM_CHANNEL, undefined, new CustomEventMessage(event, payload));\n    }\n  }]);\n\n  return ReceiverAdsManager;\n}();\n\nexports.ReceiverAdsManager = ReceiverAdsManager;\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// playkit-cast-receiver.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap bbcc7b27527f996e63b0","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"kaltura-player-js\",\"commonjs2\":\"kaltura-player-js\",\"amd\":\"kaltura-player-js\",\"root\":[\"KalturaPlayer\"]}\n// module id = 0\n// module chunks = 0","// @flow\nimport {cast as remote, core} from 'kaltura-player-js';\nimport {PlayerLoader} from './player-loader';\nimport {ReceiverTracksManager} from './receiver-tracks-manager';\nimport {ReceiverAdsManager} from './receiver-ads-manager';\n\nconst {FakeEvent, EventManager, DrmScheme, Utils, getLogger} = core;\nconst {CustomMessageType, CustomActionType, CustomActionMessage} = remote;\n\nexport const CUSTOM_CHANNEL = 'urn:x-cast:com.kaltura.cast.playkit';\nconst LIVE_EDGE = -1;\n\nclass ReceiverManager {\n  _logger: any = getLogger('ReceiverManager');\n  _context: Object;\n  _playerManager: Object;\n  _eventManager: EventManager;\n  _player: Object;\n  _shouldSeekToLiveEdge: boolean = false;\n  _shouldAutoPlay: boolean = true;\n  _firstPlay: boolean = true;\n  _tracksManager: ReceiverTracksManager;\n  _adsManager: ReceiverAdsManager;\n  _messageInterceptorsHandlers: {[message: string]: Function} = {\n    [cast.framework.messages.MessageType.LOAD]: this.onLoad,\n    [cast.framework.messages.MessageType.MEDIA_STATUS]: this.onMediaStatus,\n    [cast.framework.messages.MessageType.STOP]: this.onStop\n  };\n  _playerManagerEventHandlers: {[event: string]: Function} = {\n    [cast.framework.events.EventType.REQUEST_PLAY]: this._onPlayEvent,\n    [cast.framework.events.EventType.REQUEST_PAUSE]: this._onPauseEvent,\n    [cast.framework.events.EventType.PLAYER_LOAD_COMPLETE]: this._onPlayerLoadCompleteEvent\n  };\n  _castContextEventHandlers: {[event: string]: Function} = {\n    [cast.framework.system.EventType.SYSTEM_VOLUME_CHANGED]: this._onSystemVolumeChangedEvent\n  };\n\n  constructor(config: Object) {\n    this._context = cast.framework.CastReceiverContext.getInstance();\n    this._playerManager = this._context.getPlayerManager();\n    this._eventManager = new EventManager();\n    this._player = PlayerLoader.loadPlayer(config);\n    this._tracksManager = new ReceiverTracksManager(this._player);\n    this._adsManager = new ReceiverAdsManager(this._player);\n    this._attachListeners();\n  }\n\n  getPlayer(): Object {\n    return this._player;\n  }\n\n  start(options: Object): void {\n    const defaultOptions = new cast.framework.CastReceiverOptions();\n    defaultOptions.customNamespaces = {\n      [CUSTOM_CHANNEL]: cast.framework.system.MessageType.JSON\n    };\n    Utils.Object.mergeDeep(defaultOptions, options);\n    this._logger.debug('Start receiver', defaultOptions);\n    this._context.start(defaultOptions);\n  }\n\n  onLoad(loadRequestData: Object): Promise<Object> {\n    this._logger.debug('onLoad', loadRequestData);\n    this._reset();\n    return new Promise((resovle, reject) => {\n      const mediaInfo = loadRequestData.media.customData.mediaInfo;\n      this._maybeCreateVmapAdsRequest(loadRequestData.media);\n      this._maybeReplaceAdTagTimestamp(loadRequestData.media);\n      this._eventManager.listen(this._player, this._player.Event.ERROR, event => reject(event));\n      this._eventManager.listen(this._player, this._player.Event.SOURCE_SELECTED, event => this._onSourceSelected(event, loadRequestData, resovle));\n      this._player.loadMedia(mediaInfo);\n    });\n  }\n\n  onStop(requestData: Object): Promise<Object> {\n    this._logger.debug('onStop', requestData);\n    this._destroy();\n    return requestData;\n  }\n\n  onMediaStatus(mediaStatus: Object): Promise<Object> {\n    this._logger.debug('mediaStatus', mediaStatus);\n    mediaStatus.customData = mediaStatus.customData || {};\n    if (this._player) {\n      mediaStatus.customData.mediaInfo = this._player.getMediaInfo();\n      if (this._player.isLive()) {\n        // Workaround to avoid Live & Dvr seek issue\n        mediaStatus.supportedMediaCommands -= cast.framework.messages.Command.SEEK;\n        mediaStatus.currentTime = this._player.currentTime;\n        if (mediaStatus.media) {\n          mediaStatus.media.duration = this._player.duration;\n        }\n      }\n    }\n    if (mediaStatus.playerState !== this._playerManager.getPlayerState()) {\n      mediaStatus.playerState = this._playerManager.getPlayerState();\n    }\n    return mediaStatus;\n  }\n\n  _attachListeners(): void {\n    this._context.addCustomMessageListener(CUSTOM_CHANNEL, customMessage => this._onCustomMessage(customMessage));\n    Object.keys(this._playerManagerEventHandlers).forEach(event =>\n      this._playerManager.addEventListener(event, this._playerManagerEventHandlers[event].bind(this))\n    );\n    Object.keys(this._messageInterceptorsHandlers).forEach(msg =>\n      this._playerManager.setMessageInterceptor(msg, this._messageInterceptorsHandlers[msg].bind(this))\n    );\n    Object.keys(this._castContextEventHandlers).forEach(event =>\n      this._context.addEventListener(event, this._castContextEventHandlers[event].bind(this))\n    );\n  }\n\n  _reset(): void {\n    this._shouldAutoPlay = true;\n    this._firstPlay = true;\n    this._shouldSeekToLiveEdge = false;\n    this._eventManager.removeAll();\n    this._player.reset();\n  }\n\n  _destroy(): void {\n    this._shouldAutoPlay = true;\n    this._firstPlay = true;\n    this._eventManager.destroy();\n    this._player.destroy();\n  }\n\n  _onSourceSelected(event: FakeEvent, loadRequestData: Object, resolve: Function): void {\n    const source = event.payload.selectedSource[0];\n    this._handleAutoPlay(loadRequestData);\n    this._handleLiveDvr(loadRequestData);\n    this._setMediaInfo(loadRequestData, source);\n    this._maybeSetDrmLicenseUrl(source);\n    resolve(loadRequestData);\n  }\n\n  _setMediaInfo(loadRequestData: Object, source: Object): void {\n    loadRequestData.media.contentId = loadRequestData.media.contentId || source.id;\n    loadRequestData.media.contentUrl = loadRequestData.media.contentUrl || source.url;\n    loadRequestData.media.contentType = loadRequestData.media.contentType || source.mimetype;\n    loadRequestData.media.streamType = this._player.isLive() ? cast.framework.messages.StreamType.LIVE : cast.framework.messages.StreamType.BUFFERED;\n    loadRequestData.media.metadata = loadRequestData.media.metadata || new cast.framework.messages.GenericMediaMetadata();\n    loadRequestData.media.metadata.title = loadRequestData.media.metadata.title || this._player.config.sources.metadata.name;\n    loadRequestData.media.metadata.subtitle = loadRequestData.media.metadata.subtitle || this._player.config.sources.metadata.description;\n    loadRequestData.media.metadata.images = loadRequestData.media.metadata.images || [{url: this._player.config.sources.poster}];\n    loadRequestData.media.hlsSegmentFormat = loadRequestData.media.hlsSegmentFormat || cast.framework.messages.HlsSegmentFormat.TS;\n    this._logger.debug('Media info has been set', loadRequestData);\n  }\n\n  _handleAutoPlay(loadRequestData: Object): void {\n    if (!loadRequestData.autoplay) {\n      this._shouldAutoPlay = false;\n      loadRequestData.autoplay = true;\n    }\n  }\n\n  _handleLiveDvr(loadRequestData: Object): void {\n    if (this._player.isDvr() && loadRequestData.currentTime === LIVE_EDGE) {\n      this._shouldSeekToLiveEdge = true;\n      this._logger.debug(`Live DVR will seek to live edge? ${this._shouldSeekToLiveEdge}`);\n    }\n  }\n\n  _maybeSetDrmLicenseUrl(source: Object): void {\n    if (source.drmData) {\n      const data = source.drmData.find(data => data.scheme === DrmScheme.WIDEVINE);\n      if (data) {\n        this._playerManager.setMediaPlaybackInfoHandler((loadRequest, playbackConfig) => {\n          playbackConfig.protectionSystem = cast.framework.ContentProtection.WIDEVINE;\n          playbackConfig.licenseUrl = data.licenseUrl;\n          this._logger.debug(`Set drm license url`, playbackConfig);\n          return playbackConfig;\n        });\n      }\n    }\n  }\n\n  _onPlayEvent(): void {\n    if (this._firstPlay) {\n      if (this._shouldSeekToLiveEdge) {\n        this._player.seekToLiveEdge();\n      }\n      if (!this._shouldAutoPlay) {\n        this._playerManager.pause();\n      } else {\n        this._player.play();\n      }\n      this._firstPlay = false;\n    } else {\n      this._player.play();\n    }\n  }\n\n  _onPauseEvent(): void {\n    this._player.pause();\n  }\n\n  _onPlayerLoadCompleteEvent(): void {\n    this._player.load();\n    this._player.ready().then(() => this._tracksManager.setInitialTracks());\n  }\n\n  _onSystemVolumeChangedEvent(systemVolumeChangedEvent: Object): void {\n    const data = systemVolumeChangedEvent.data;\n    if (this._player.volume !== data.level) {\n      this._player.volume = data.level;\n    }\n    if (this._player.muted !== data.muted) {\n      this._player.muted = data.muted;\n    }\n  }\n\n  _onCustomMessage(customMessageEvent: Object): void {\n    const customMessage = customMessageEvent.data;\n    this._logger.debug('Custom message received', customMessage);\n    switch (customMessage.type) {\n      case CustomMessageType.ACTION:\n        this._handleCustomAction(customMessage);\n        break;\n      default:\n        break;\n    }\n  }\n\n  _handleCustomAction(customAction: CustomActionMessage): void {\n    switch (customAction.action) {\n      case CustomActionType.SKIP_AD:\n        this._adsManager.skipAd();\n        break;\n      default:\n        break;\n    }\n  }\n\n  _maybeCreateVmapAdsRequest(media: Object): Object {\n    if (media.customData && media.customData.vmapAdsRequest) {\n      media.vmapAdsRequest = media.customData.vmapAdsRequest;\n    }\n  }\n\n  _maybeReplaceAdTagTimestamp(media: Object): void {\n    const replaceTimestamp = adtag => {\n      if (adtag && regex.test(adtag)) {\n        const match = adtag.match(regex);\n        return adtag.replace(match[1], Date.now());\n      }\n      return adtag;\n    };\n    const regex = /correlator=(\\[timestamp\\])/;\n    if (media.breakClips) {\n      const breakClips = media.breakClips;\n      breakClips.forEach(breakClip => {\n        if (breakClip.vastAdsRequest && breakClip.vastAdsRequest.adTagUrl) {\n          breakClip.vastAdsRequest.adTagUrl = replaceTimestamp(breakClip.vastAdsRequest.adTagUrl);\n        }\n      });\n    }\n    if (media.vmapAdsRequest) {\n      media.vmapAdsRequest.adTagUrl = replaceTimestamp(media.vmapAdsRequest.adTagUrl);\n    }\n  }\n}\n\nexport {ReceiverManager};\n\n\n\n// WEBPACK FOOTER //\n// ./receiver-manager.js","// @flow\nimport {core, setup} from 'kaltura-player-js';\nimport {CastEngine} from './cast-engine';\nimport {DefaultPlayerConfig} from './default-player-config';\nimport {ReceiverError} from './error/error';\nimport {ErrorType} from './error/error-type';\n\nconst {Utils, unRegisterEngine, registerEngine, EngineType} = core;\n\nexport const CAST_MEDIA_PLAYER_TAG: string = 'cast-media-player';\nconst PLAYER_CONTAINER: string = 'kaltura-receiver-player-container';\n\nclass PlayerLoader {\n  static loadPlayer(config: Object): Object {\n    const castMediaPlayerEl = Utils.Dom.getElementsByTagName(CAST_MEDIA_PLAYER_TAG)[0];\n    if (castMediaPlayerEl) {\n      const castMediaElement = castMediaPlayerEl.getMediaElement();\n      castMediaElement.style.position = 'absolute';\n      const playerContainerEl = Utils.Dom.createElement('div');\n      playerContainerEl.id = PLAYER_CONTAINER;\n      Utils.Dom.appendChild(document.body, playerContainerEl);\n      unRegisterEngine(EngineType.HTML5);\n      registerEngine(EngineType.CAST, CastEngine);\n      const playerConfig = Utils.Object.mergeDeep({targetId: PLAYER_CONTAINER}, DefaultPlayerConfig, config);\n      const player = setup(playerConfig);\n      Utils.Dom.prependTo(playerContainerEl, castMediaElement.parentNode);\n      return player;\n    } else {\n      throw new ReceiverError(ErrorType.CAST_ELEMENT_NOT_FOUND);\n    }\n  }\n}\n\nexport {PlayerLoader};\n\n\n\n// WEBPACK FOOTER //\n// ./player-loader.js","// @flow\nimport {ReceiverManagerAPI} from './receiver-manager-api';\n\ndeclare var __VERSION__: string;\ndeclare var __NAME__: string;\n\nexport {ReceiverManagerAPI as Receiver};\nexport {__VERSION__ as VERSION, __NAME__ as NAME};\n\n\n\n// WEBPACK FOOTER //\n// ./index.js","// @flow\nimport {ReceiverManager} from './receiver-manager';\n\nlet receiverManager;\n\nclass ReceiverManagerAPI {\n  constructor(config: Object) {\n    receiverManager = new ReceiverManager(config);\n  }\n\n  start(options?: Object = {}): void {\n    receiverManager.start(options);\n  }\n\n  onLoad(loadRequestData: Object): Promise<Object> {\n    return receiverManager.onLoad(loadRequestData);\n  }\n\n  onStop(requestData: Object): Promise<Object> {\n    return receiverManager.onStop(requestData);\n  }\n\n  onMediaStatus(mediaStatus: Object): Promise<Object> {\n    return receiverManager.onMediaStatus(mediaStatus);\n  }\n\n  addEventListener(type: string, listener: Function): void {\n    receiverManager.getPlayer().addEventListener(type, listener);\n  }\n\n  removeEventListener(type: string, listener: Function): void {\n    receiverManager.getPlayer().removeEventListener(type, listener);\n  }\n}\n\nexport {ReceiverManagerAPI};\n\n\n\n// WEBPACK FOOTER //\n// ./receiver-manager-api.js","// @flow\nimport {core} from 'kaltura-player-js';\nimport {CAST_MEDIA_PLAYER_TAG} from './player-loader';\n\nconst {Track, Utils, FakeEvent, MediaType, getLogger, FakeEventTarget, EventManager, EventType, AudioTrack, TextTrack, AbrMode, MimeType} = core;\n\nclass CastEngine extends FakeEventTarget {\n  static get id(): string {\n    return 'cast';\n  }\n\n  static canPlaySource(source: Object): boolean {\n    const mimeType = source.mimetype.toLowerCase();\n    const supported = CastEngine._supportedMimeTypes.includes(mimeType);\n    if (supported) {\n      if (source.drmData) {\n        return MimeType.DASH.includes(mimeType);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  static createEngine(source: Object, config: Object): Object {\n    return new this(source, config);\n  }\n\n  static _logger: any = getLogger('CastEngine');\n\n  static _supportedMimeTypes: Array<string> = [...MimeType.HLS, ...MimeType.DASH, ...MimeType.PROGRESSIVE, ...MimeType.SMOOTH_STREAMING];\n\n  _el: HTMLVideoElement;\n  _source: Object;\n  _config: Object;\n  _eventManager: EventManager;\n  _isLoaded: boolean = false;\n  _tracks: Array<Track> = [];\n  _volume: number = 1;\n  _muted: boolean = false;\n  _paused: boolean = false;\n  _seeking: boolean = false;\n  _ended: boolean = false;\n  _mediaElementEvents: Array<string> = [\n    EventType.ABORT,\n    EventType.CAN_PLAY,\n    EventType.CAN_PLAY_THROUGH,\n    EventType.DURATION_CHANGE,\n    EventType.EMPTIED,\n    EventType.ENDED,\n    EventType.LOADED_DATA,\n    EventType.LOADED_METADATA,\n    EventType.LOAD_START,\n    EventType.PAUSE,\n    EventType.PLAY,\n    EventType.PLAYING,\n    EventType.PROGRESS,\n    EventType.RATE_CHANGE,\n    EventType.SEEKED,\n    EventType.SEEKING,\n    EventType.STALLED,\n    EventType.TIME_UPDATE,\n    EventType.SUSPEND,\n    EventType.WAITING\n  ];\n\n  constructor(source: Object, config: Object) {\n    super();\n    this._context = cast.framework.CastReceiverContext.getInstance();\n    this._playerManager = this._context.getPlayerManager();\n    this._eventManager = new EventManager();\n    this._createVideoElement();\n    this._init(source, config);\n  }\n\n  restore(source: Object, config: Object): void {\n    this.reset();\n    this._init(source, config);\n  }\n\n  attach(): void {\n    const videoElement = this.getVideoElement();\n    this._eventManager.listen(videoElement, EventType.SEEKED, () => (this._seeking = false));\n    this._eventManager.listen(videoElement, EventType.SEEKING, () => (this._seeking = true));\n    this._eventManager.listen(videoElement, EventType.ENDED, () => {\n      this._ended = true;\n      // Receiver has a problem where the current time isn't equals to the duration when\n      // playback is ended. This prevent from analytics plugins to report 100% reached.\n      // So we're trigger time update event again on ended and take care to handle this state also in the\n      // current time setter.\n      if (!this.isLive()) {\n        this.dispatchEvent(new FakeEvent(EventType.TIME_UPDATE));\n      }\n    });\n    if (this.isLive()) {\n      this._eventManager.listen(videoElement, EventType.TIME_UPDATE, () => this._playerManager.broadcastStatus(true));\n    }\n    this._mediaElementEvents.forEach(mediaElementEvent =>\n      this._eventManager.listen(videoElement, mediaElementEvent, () => this.dispatchEvent(new FakeEvent(mediaElementEvent)))\n    );\n  }\n\n  detach(): void {\n    // Empty implementation\n  }\n\n  static runCapabilities(): void {\n    // Empty implementation\n  }\n\n  static prepareVideoElement(): void {\n    // Empty implementation\n  }\n\n  static getCapabilities(): Promise<Object> {\n    return Promise.resolve({\n      [CastEngine.id]: {\n        autoplay: true,\n        mutedAutoPlay: true\n      }\n    });\n  }\n\n  get id(): string {\n    return CastEngine.id;\n  }\n\n  getVideoElement(): HTMLVideoElement {\n    return this._el;\n  }\n\n  load(startTime: ?number): Promise<Object> {\n    CastEngine._logger.debug('Load start', startTime);\n    this._isLoaded = true;\n    this._parseTracks();\n    this.dispatchEvent(new FakeEvent(EventType.ABR_MODE_CHANGED, {mode: AbrMode.AUTO}));\n    CastEngine._logger.debug('Load end', this._tracks);\n    return Promise.resolve({tracks: this._tracks});\n  }\n\n  play(): void {\n    this._paused = false;\n  }\n\n  pause(): void {\n    this._paused = true;\n  }\n\n  hideTextTrack(): void {\n    // Empty implementation\n  }\n\n  selectTextTrack(textTrack: TextTrack): void {\n    this.dispatchEvent(new FakeEvent(EventType.TEXT_TRACK_CHANGED, {selectedTextTrack: textTrack}));\n  }\n\n  selectAudioTrack(audioTrack: AudioTrack): void {\n    this.dispatchEvent(new FakeEvent(EventType.AUDIO_TRACK_CHANGED, {selectedAudioTrack: audioTrack}));\n  }\n\n  selectVideoTrack(videoTrack: VideoTrack): void {\n    this.dispatchEvent(new FakeEvent(EventType.VIDEO_TRACK_CHANGED, {selectedVideoTrack: videoTrack}));\n  }\n\n  enableAdaptiveBitrate(): void {\n    // Empty implementation\n  }\n\n  isAdaptiveBitrateEnabled(): boolean {\n    return true;\n  }\n\n  getSelectedSource(): Object {\n    return Utils.Object.copyDeep(this._source);\n  }\n\n  isLive() {\n    return this._config.sources.type === MediaType.LIVE;\n  }\n\n  seekToLiveEdge(): void {\n    const range = this._playerManager.getLiveSeekableRange();\n    if (range) {\n      this._playerManager.seek(range.end);\n    }\n  }\n\n  getStartTimeOfDvrWindow(): number {\n    const range = this._playerManager.getLiveSeekableRange();\n    if (range) {\n      return range.start;\n    }\n    return 0;\n  }\n\n  reset(): void {\n    this._eventManager.removeAll();\n    this._tracks = [];\n    this._isLoaded = false;\n    this._paused = false;\n    this._seeking = false;\n    this._ended = false;\n  }\n\n  destroy(): void {\n    this._eventManager.destroy();\n    this._tracks = [];\n    this._isLoaded = false;\n    this._mediaElementEvents = [];\n    this._volume = 1;\n    this._muted = false;\n    this._paused = false;\n    this._seeking = false;\n    this._ended = false;\n    if (this._el) {\n      Utils.Dom.removeAttribute(this._el, 'src');\n      Utils.Dom.removeChild(this._el.parentNode, this._el);\n    }\n  }\n\n  set currentTime(value: number): void {\n    // Empty implementation\n  }\n\n  get currentTime(): number {\n    if (this.isLive()) {\n      return this._playerManager.getCurrentTimeSec() - this.getStartTimeOfDvrWindow();\n    }\n    if (this._ended) {\n      return this._playerManager.getDurationSec();\n    }\n    return this._playerManager.getCurrentTimeSec();\n  }\n\n  set muted(value: boolean): void {\n    this._muted = value;\n  }\n\n  get muted(): boolean {\n    return this._muted;\n  }\n\n  set volume(value: number): void {\n    this._volume = value;\n    this.dispatchEvent(EventType.VOLUME_CHANGE);\n  }\n\n  get volume(): number {\n    return this._volume;\n  }\n\n  get paused(): boolean {\n    return this._paused;\n  }\n\n  get seeking(): boolean {\n    return this._seeking;\n  }\n\n  get buffered(): Array<any> {\n    return [];\n  }\n\n  get duration(): number {\n    if (this.isLive()) {\n      const range = this._playerManager.getLiveSeekableRange();\n      if (range) {\n        return range.end - this.getStartTimeOfDvrWindow();\n      }\n    }\n    return this._playerManager.getDurationSec();\n  }\n\n  get src(): string {\n    return this._isLoaded ? this._source.url : '';\n  }\n\n  set playsinline(playsinline: boolean): void {\n    // Empty implementation\n  }\n\n  get playsinline(): boolean {\n    return true;\n  }\n\n  set playbackRate(playbackRate: number): void {\n    // Empty implementation\n  }\n\n  get playbackRate(): number {\n    return this._playerManager.getPlaybackRate();\n  }\n\n  get playbackRates(): Array<number> {\n    return [1];\n  }\n\n  get defaultPlaybackRate(): number {\n    return 1;\n  }\n\n  set crossOrigin(crossOrigin: ?string): void {\n    // Empty implementation\n  }\n\n  get crossOrigin(): ?string {\n    // Empty implementation\n  }\n\n  get ended(): boolean {\n    return this._ended;\n  }\n\n  _createVideoElement(): void {\n    const castMediaPlayerEl: Object = document.getElementsByTagName(CAST_MEDIA_PLAYER_TAG)[0];\n    if (castMediaPlayerEl) {\n      this._el = castMediaPlayerEl.getMediaElement();\n    }\n  }\n\n  _init(source: Object, config: Object): void {\n    this._source = source;\n    this._config = config;\n    this.attach();\n  }\n\n  _parseTracks(): void {\n    const audioTracksManager = this._playerManager.getAudioTracksManager();\n    const castAudioTracks = audioTracksManager.getTracks();\n    const audioTracks = this._parseAudioTracks(castAudioTracks);\n\n    const textTracksManager = this._playerManager.getTextTracksManager();\n    const castTextTracks = textTracksManager.getTracks();\n    const textTracks = this._parseTextTracks(castTextTracks);\n\n    this._tracks = audioTracks.concat(textTracks);\n  }\n\n  _parseTextTracks(castTextTracks: Array<Object>): Array<TextTrack> {\n    const textTracks = [];\n    castTextTracks.forEach(track => {\n      const settings: Object = {\n        id: track.trackId,\n        index: track.trackId - 1,\n        label: track.name,\n        language: track.language,\n        kind: track.subType || 'subtitles',\n        active: false\n      };\n      textTracks.push(new TextTrack(settings));\n    });\n    return textTracks;\n  }\n\n  _parseAudioTracks(castAudioTracks: Array<Object>): Array<AudioTrack> {\n    const audioTracks = [];\n    castAudioTracks.forEach(track => {\n      const settings: Object = {\n        id: track.trackId,\n        index: track.trackId - 1,\n        label: track.name,\n        language: track.language,\n        active: false\n      };\n      audioTracks.push(new AudioTrack(settings));\n    });\n    return audioTracks;\n  }\n}\n\nexport {CastEngine};\n\n\n\n// WEBPACK FOOTER //\n// ./cast-engine.js","// @flow\nimport {core} from 'kaltura-player-js';\n\nconst {StreamType, EngineType} = core;\n\nconst DefaultPlayerConfig: Object = {\n  playback: {\n    autoplay: false,\n    preload: 'none',\n    disableUserCache: true,\n    streamPriority: [\n      {\n        engine: EngineType.CAST,\n        format: StreamType.HLS\n      },\n      {\n        engine: EngineType.CAST,\n        format: StreamType.DASH\n      },\n      {\n        engine: EngineType.CAST,\n        format: StreamType.PROGRESSIVE\n      }\n    ]\n  },\n  ui: {\n    disable: true\n  }\n};\n\nexport {DefaultPlayerConfig};\n\n\n\n// WEBPACK FOOTER //\n// ./default-player-config.js","// @flow\nclass ReceiverError {\n  code: number;\n  description: string;\n\n  constructor(type: Object) {\n    this.code = type.code;\n    this.description = type.description;\n  }\n}\n\nexport {ReceiverError};\n\n\n\n// WEBPACK FOOTER //\n// ./error/error.js","// @flow\nconst ErrorType: {[type: string]: Object} = {\n  CAST_ELEMENT_NOT_FOUND: {\n    code: 100020,\n    description: \"<cast-media-element> tag isn't found in the DOM\"\n  }\n};\n\nexport {ErrorType};\n\n\n\n// WEBPACK FOOTER //\n// ./error/error-type.js","// @flow\nimport {cast as remote, core} from 'kaltura-player-js';\n\nconst {TextStyleConverter} = remote;\nconst {TrackType, getLogger} = core;\n\nclass ReceiverTracksManager {\n  _logger: any = getLogger('ReceiverTracksManager');\n  _playerManager: Object;\n  _player: Object;\n\n  constructor(player: Object) {\n    this._playerManager = cast.framework.CastReceiverContext.getInstance().getPlayerManager();\n    this._player = player;\n    this._attachListeners();\n  }\n\n  setInitialTracks(): void {\n    const mediaInfo = this._playerManager.getMediaInformation();\n    this._logger.debug('Set initial tracks', mediaInfo.customData);\n    if (mediaInfo.customData) {\n      this._setInitialAudioTrack(mediaInfo.customData.audioLanguage);\n      this._setInitialTextTrack(mediaInfo.customData.textLanguage);\n    }\n  }\n\n  _attachListeners(): void {\n    this._playerManager.addEventListener(cast.framework.events.EventType.REQUEST_EDIT_TRACKS_INFO, requestEvent => {\n      const activeTrackIds = requestEvent.requestData.activeTrackIds;\n      if (activeTrackIds) {\n        this._handleAudioTrackSelection(activeTrackIds);\n        this._handleTextTrackSelection(activeTrackIds);\n      } else {\n        const textTrackStyle = requestEvent.requestData.textTrackStyle;\n        this._handleTextStyleSelection(textTrackStyle);\n      }\n    });\n  }\n\n  _handleTextTrackSelection(activeTrackIds: Array<number>): void {\n    const textTracks = this._player.getTracks(TrackType.TEXT);\n    const activeTextTrack = textTracks.find(t => t.active);\n    const nextActiveTextTrack = textTracks.find(t => activeTrackIds.includes(t.id));\n    if (nextActiveTextTrack) {\n      this._player.selectTrack(nextActiveTextTrack);\n    } else if (activeTextTrack.language !== 'off') {\n      const offTrack = textTracks.find(t => t.language === 'off');\n      this._player.selectTrack(offTrack);\n    }\n  }\n\n  _handleAudioTrackSelection(activeTrackIds: Array<number>): void {\n    const audioTracks = this._player.getTracks(TrackType.AUDIO);\n    const activeAudioTrack = audioTracks.find(t => t.active);\n    const nextActiveAudioTrack = audioTracks.find(t => activeTrackIds.includes(t.id));\n    if (activeAudioTrack.id !== nextActiveAudioTrack.id) {\n      this._player.selectTrack(nextActiveAudioTrack);\n    }\n  }\n\n  _handleTextStyleSelection(textStyle: Object): void {\n    this._player.textStyle = TextStyleConverter.toPlayerTextStyle(textStyle);\n  }\n\n  _setInitialTextTrack(textLanguage: ?string): void {\n    const textTracksManager = this._playerManager.getTextTracksManager();\n    if (textLanguage) {\n      this._logger.debug('Set initial text track - setActiveByLanguage', textLanguage);\n      textTracksManager.setActiveByLanguage(textLanguage);\n    }\n  }\n\n  _setInitialAudioTrack(audioLanguage: ?string): void {\n    const audioTracksManager = this._playerManager.getAudioTracksManager();\n    const audioTracks = audioTracksManager.getTracks();\n    this._logger.debug('Set initial audio track', audioLanguage, audioTracks);\n    if (audioTracks.length > 0) {\n      if (audioLanguage) {\n        this._logger.debug('Set initial audio track - setActiveByLanguage', audioLanguage);\n        audioTracksManager.setActiveByLanguage(audioLanguage);\n      } else {\n        const audioTrackId = audioTracks[0].trackId;\n        const audioTrack = this._player.getTracks(TrackType.AUDIO).find(t => t.id === audioTrackId);\n        if (audioTrack) {\n          this._logger.debug('Set initial audio track - setActiveById', audioTrackId);\n          audioTracksManager.setActiveById(audioTrackId);\n          this._player.selectTrack(audioTrack);\n        }\n      }\n    }\n  }\n}\n\nexport {ReceiverTracksManager};\n\n\n\n// WEBPACK FOOTER //\n// ./receiver-tracks-manager.js","// @flow\nimport {cast as remote, core} from 'kaltura-player-js';\nimport {CUSTOM_CHANNEL} from './receiver-manager';\n\nconst {EventType, Ad, AdBreak, AdBreakType, getLogger} = core;\nconst {CustomEventMessage} = remote;\n\nclass ReceiverAdsManager {\n  _logger: any = getLogger('ReceiverAdsManager');\n  _context: Object;\n  _playerManager: Object;\n  _player: Object;\n  _adProgressIntervalId: ?number;\n  _ad: ?Ad;\n  _adBreak: ?AdBreak;\n  _adIsPlaying: boolean;\n  _adCanSkipTriggered: false;\n  _adLifecycleEventHandlers: {[event: string]: Function};\n  _adTrackingEventHandlers: {[event: string]: Function};\n  _playerEventHandlers: {[event: string]: Function};\n  _timePercentEvent: {[time: string]: boolean} = {\n    AD_REACHED_25_PERCENT: false,\n    AD_REACHED_50_PERCENT: false,\n    AD_REACHED_75_PERCENT: false\n  };\n\n  constructor(player: Object) {\n    this._context = cast.framework.CastReceiverContext.getInstance();\n    this._playerManager = this._context.getPlayerManager();\n    this._player = player;\n    this._bindMethods();\n    this._attachListeners();\n  }\n\n  skipAd(): void {\n    this._logger.debug('Skip ad');\n    const requestData = new cast.framework.messages.RequestData(cast.framework.messages.MessageType.SKIP_AD);\n    this._playerManager.sendLocalMediaRequest(requestData);\n  }\n\n  _bindMethods(): void {\n    this._onPlayerLoadComplete = this._onPlayerLoadComplete.bind(this);\n    this._onBreakStarted = this._onBreakStarted.bind(this);\n    this._onBreakEnded = this._onBreakEnded.bind(this);\n    this._onBreakClipLoading = this._onBreakClipLoading.bind(this);\n    this._onBreakClipStarted = this._onBreakClipStarted.bind(this);\n    this._onBreakClipEnded = this._onBreakClipEnded.bind(this);\n    this._onAdPaused = this._onAdPaused.bind(this);\n    this._onAdResumed = this._onAdResumed.bind(this);\n    this._onAdProgress = this._onAdProgress.bind(this);\n    this._onMuteChange = this._onMuteChange.bind(this);\n    this._onVolumeChange = this._onVolumeChange.bind(this);\n  }\n\n  _attachListeners(): void {\n    this._adLifecycleEventHandlers = {\n      [cast.framework.events.EventType.PLAYER_LOAD_COMPLETE]: this._onPlayerLoadComplete,\n      [cast.framework.events.EventType.BREAK_STARTED]: this._onBreakStarted,\n      [cast.framework.events.EventType.BREAK_ENDED]: this._onBreakEnded,\n      [cast.framework.events.EventType.BREAK_CLIP_LOADING]: this._onBreakClipLoading,\n      [cast.framework.events.EventType.BREAK_CLIP_STARTED]: this._onBreakClipStarted,\n      [cast.framework.events.EventType.BREAK_CLIP_ENDED]: this._onBreakClipEnded\n    };\n    this._adTrackingEventHandlers = {\n      [cast.framework.events.EventType.PAUSE]: this._onAdPaused,\n      [cast.framework.events.EventType.PLAY]: this._onAdResumed\n    };\n    this._playerEventHandlers = {\n      [EventType.MUTE_CHANGE]: this._onMuteChange,\n      [EventType.VOLUME_CHANGE]: this._onVolumeChange\n    };\n    Object.keys(this._adLifecycleEventHandlers).forEach(event => this._playerManager.addEventListener(event, this._adLifecycleEventHandlers[event]));\n  }\n\n  _onPlayerLoadComplete(): void {\n    const positions = [];\n    const breakManager = this._playerManager.getBreakManager();\n    if (breakManager) {\n      const breaks = breakManager.getBreaks();\n      if (breaks && breaks.length > 0) {\n        breaks.forEach(b => positions.push(b.position));\n        this._sendEventAndCustomMessage(this._player.Event.AD_MANIFEST_LOADED, {adBreaksPosition: positions});\n      }\n    }\n  }\n\n  _onBreakStarted(breaksEvent: Object): void {\n    this._toggleAdBreakListeners(true);\n    const adBreakOptions = this._getAdBreakOptions(breaksEvent);\n    const adBreak = new AdBreak(adBreakOptions);\n    this._sendEventAndCustomMessage(this._player.Event.AD_BREAK_START, {adBreak: adBreak});\n    this._adBreak = adBreak;\n  }\n\n  _onBreakEnded(breaksEvent: Object): void {\n    this._toggleAdBreakListeners(false);\n    this._sendEventAndCustomMessage(this._player.Event.AD_BREAK_END);\n    this._adBreak = null;\n    const breaks = this._playerManager.getBreakManager().getBreaks();\n    const index = breaks.findIndex(b => b.id === breaksEvent.breakId);\n    if (index + 1 === breaks.length) {\n      this._sendEventAndCustomMessage(this._player.Event.ALL_ADS_COMPLETED);\n    }\n  }\n\n  _onBreakClipLoading(breaksEvent: Object): void {\n    const adOptions = this._getAdOptions(breaksEvent);\n    const ad = new Ad(breaksEvent.breakClipId, adOptions);\n    this._sendEventAndCustomMessage(this._player.Event.AD_LOADED, {ad: ad});\n    this._ad = ad;\n  }\n\n  _onBreakClipStarted(): void {\n    this._sendEventAndCustomMessage(this._player.Event.AD_STARTED);\n    this._adIsPlaying = true;\n  }\n\n  _onBreakClipEnded(): void {\n    this._sendEventAndCustomMessage(this._player.Event.AD_COMPLETED);\n    this._adIsPlaying = false;\n    this._adCanSkipTriggered = false;\n    this._ad = null;\n  }\n\n  _onAdPaused(): void {\n    this._sendEventAndCustomMessage(this._player.Event.AD_PAUSED);\n    this._adIsPlaying = false;\n  }\n\n  _onAdResumed(): void {\n    this._sendEventAndCustomMessage(this._player.Event.AD_RESUMED);\n    this._adIsPlaying = true;\n  }\n\n  _onAdProgress(): void {\n    if (!this._ad) return;\n    const adDuration = this._playerManager.getBreakClipDurationSec();\n    const adCurrentTime = this._playerManager.getBreakClipCurrentTimeSec();\n    const percent = adCurrentTime / adDuration;\n    if (!this._timePercentEvent.AD_REACHED_25_PERCENT && percent >= 0.25) {\n      this._timePercentEvent.AD_REACHED_25_PERCENT = true;\n      this._sendEventAndCustomMessage(this._player.Event.AD_FIRST_QUARTILE);\n    }\n    if (!this._timePercentEvent.AD_REACHED_50_PERCENT && percent >= 0.5) {\n      this._timePercentEvent.AD_REACHED_50_PERCENT = true;\n      this._sendEventAndCustomMessage(this._player.Event.AD_MIDPOINT);\n    }\n    if (!this._timePercentEvent.AD_REACHED_75_PERCENT && percent >= 0.75) {\n      this._timePercentEvent.AD_REACHED_75_PERCENT = true;\n      this._sendEventAndCustomMessage(this._player.Event.AD_THIRD_QUARTILE);\n    }\n    if (!this._adCanSkipTriggered && this._ad.skippable) {\n      if (adCurrentTime >= this._ad.skipOffset) {\n        this._sendEventAndCustomMessage(this._player.Event.AD_CAN_SKIP);\n        this._adCanSkipTriggered = true;\n      }\n    }\n    this._sendEventAndCustomMessage(this._player.Event.AD_PROGRESS, {\n      adProgress: {\n        currentTime: adCurrentTime,\n        duration: adDuration\n      }\n    });\n  }\n\n  _onMuteChange(): void {\n    if (this._player.muted) {\n      this._sendEventAndCustomMessage(this._player.Event.AD_MUTED);\n    }\n  }\n\n  _onVolumeChange(): void {\n    this._sendEventAndCustomMessage(this._player.Event.AD_VOLUME_CHANGED);\n  }\n\n  _toggleAdBreakListeners(toggle: boolean): void {\n    if (toggle) {\n      Object.keys(this._adTrackingEventHandlers).forEach(event => this._playerManager.addEventListener(event, this._adTrackingEventHandlers[event]));\n      Object.keys(this._playerEventHandlers).forEach(event => this._player.addEventListener(event, this._playerEventHandlers[event]));\n      this._adProgressIntervalId = setInterval(this._onAdProgress, 300);\n    } else {\n      Object.keys(this._adTrackingEventHandlers).forEach(event =>\n        this._playerManager.removeEventListener(event, this._adTrackingEventHandlers[event])\n      );\n      Object.keys(this._playerEventHandlers).forEach(event => this._player.removeEventListener(event, this._playerEventHandlers[event]));\n      clearInterval(this._adProgressIntervalId);\n      this._adProgressIntervalId = null;\n    }\n  }\n\n  _getAdBreakOptions(breaksEvent: Object): void {\n    const options = {};\n    const currentBreak = this._playerManager.getBreakManager().getBreakById(breaksEvent.breakId);\n    if (currentBreak) {\n      options.position = currentBreak.position;\n      options.type = this._getAdBreakTypeByPosition(currentBreak.position);\n      options.numAds = currentBreak.breakClipIds.length;\n    }\n    return options;\n  }\n\n  _getAdBreakTypeByPosition(position: number): void {\n    switch (position) {\n      case 0:\n        return AdBreakType.PRE;\n      case -1:\n        return AdBreakType.POST;\n      default:\n        return AdBreakType.MID;\n    }\n  }\n\n  _getAdOptions(breaksEvent: Object): void {\n    const options = {};\n    const currentBreak = this._playerManager.getBreakManager().getBreakById(breaksEvent.breakId);\n    const currentBreakClip = this._playerManager.getBreakManager().getBreakClipById(breaksEvent.breakClipId);\n    options.url = currentBreakClip.contentId;\n    options.contentType = currentBreakClip.contentType;\n    options.title = currentBreakClip.title;\n    options.position = currentBreak.breakClipIds.indexOf(currentBreakClip.id) + 1;\n    options.duration = currentBreakClip.duration;\n    options.clickThroughUrl = currentBreakClip.clickThroughUrl;\n    options.posterUrl = currentBreakClip.posterUrl;\n    options.skipOffset = currentBreakClip.whenSkippable;\n    options.linear = true;\n    return options;\n  }\n\n  _sendEventAndCustomMessage(event: string, payload: any): void {\n    this._logger.debug(event.toUpperCase(), payload);\n    this._player.dispatchEvent(event, payload);\n    this._context.sendCustomMessage(CUSTOM_CHANNEL, undefined, new CustomEventMessage(event, payload));\n  }\n}\n\nexport {ReceiverAdsManager};\n\n\n\n// WEBPACK FOOTER //\n// ./receiver-ads-manager.js"],"sourceRoot":""}